#!/bin/sh

VER='0.3.0'

set -e

if [ -z "$1" ] || [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
  echo "mex v$VER"
  echo '---------'
  echo ''
  echo 'A simple macro expander for Fortran 77.'
  echo '---------------------------------------'
  echo ''
  echo 'Usage:'
  echo 'mex [file]'
  echo 'Note: file *must* end in .mf'
  exit 0
fi

expand() {
  # Parse each line seperately
  while IFS= read -r line; do
    # First character on line
    c=$(printf %.1s "$line")

    # If we have a comment, convert it.
    if [ "$c" = '#' ]; then
      # Render whole line as a comment.
      echo "c $(echo "$line" | cut -b2-)"
      # Exit the interation
      continue
    fi

    # If we have a line number
    if echo "$c" | egrep -q '^[0-9]+$'; then
      # get the number
      num=$(echo "$line" | awk '{print $1}')
      # Get padding needed
      num_size=$(echo "$num" | wc -c) #wc adds a character, which is fine. We need one more.
      pad=$(echo "5 - $num_size" | bc)
      whitespace=$(printf '%*s' "$pad")
      # Get the rest of the line
      data=$(echo "$line" | cut -b"$num_size"-)
      # Render the line
      # There's an extra space, for the comment column.
      echo " $num$whitespace$data"
      # Exit the iteration
      continue
    fi

    # Otherwise we have an expression
    echo "      $line"
  done < "$1"
}

macro() {
  # Parameters:
  # 1: data string of an entire file.
  # 2: Root directory to search for macro file.

  # If we have a macro file, find and replace.
  if [ -f "$2"/'.mex' ]; then
    while IFS= read -r line; do
      # Get the key, and then sanitise it.
      key=$(echo "$line" | awk '{print $1}' | sed -e 's/[]\/$*.^[]/\\&/g')
      # Get the value and then sanitise it.
      value=$(echo "$line" | awk '{print $2}' | sed -e 's/[\/&]/\\&/g')
      # Run any replacements on the given data.
      echo "$1" | sed "s/\_$key\_/$value/g"
    done < "$2"/'.mex'
  fi
}

linecheck() {
  # Parameters:
  # 1: Data string to check over to see if less than 80 columns.

  fail='1' # We should show all errors before dying.
  no='0' # We need to count line numbers for helpful errors.
  echo "$1" | while IFS= read -r line; do
    length=$(echo "$line" | wc -c)
    length=$(echo "$length - 1" | bc) #wc adds a character.
    if [ "$length" -gt 80 ]; then
      fail='0' # Cause to die once errors are finished outputting.
      echo "Line $no is too long." >&2
      echo "Length: $length / 80" >&2
    fi
    no=$(echo "$no + 1" | bc) # Increment line number
  done
  # Were any errors found?
  if [ "$fail" = '0' ]; then
    exit 1
  fi
}

comparators() {
  # Parameters:
  # 1: Data string to check over

  echo "$1" | while IFS= read -r line; do
    # > == .gt.
    line=$(echo "$line" | sed 's/ > / \.gt\. /g')
    # < == .lt.
    line=$(echo "$line" | sed 's/ < / \.lt\. /g')
    # <= == .le.
    line=$(echo "$line" | sed 's/ <= / \.le\. /g')
    # >= == .ge.
    line=$(echo "$line" | sed 's/ >= / \.ge\. /g')
    # == == .eq.
    line=$(echo "$line" | sed 's/ == / \.eq\. /g')
    # != == .ne.
    line=$(echo "$line" | sed 's/ != / \.ne\. /g')
    # && == .and.
    line=$(echo "$line" | sed 's/ && / \.and\. /g')
    # || == .or.
    line=$(echo "$line" | sed 's/ || / \.or\. /g')
    # ! == .not.
    line=$(echo "$line" | sed 's/ ! / \.not\. /g')
    # |^ == .xor.
    line=$(echo "$line" | sed 's/ |^ / \.xor\. /g')
    # ~= == .eqv.
    line=$(echo "$line" | sed 's/ ~= / \.eqv\. /g')
    # ~! == .neqv.
    line=$(echo "$line" | sed 's/ ~! / \.neqv\. /g')
    # output changes.
    echo "$line"
  done
}

# Basic error handling on mex's input.
if [ ! -f "$1" ]; then
  echo 'Could not find given file.' >&2
  exit 1
fi
if [ ! -r "$1" ]; then
  echo 'Could not read given file. Do you have permission?' >&2
  exit 1
fi

root=$(dirname "$1")

# Process the given file.
data=$(expand "$1")
data=$(macro "$data" "$root")
data=$(comparators "$data")
linecheck "$data"

name=$(basename "$1" '.mf')

# Refuse to overwrite an existing file.
if [ -f "$name".f ]; then
  echo 'Error, mex will not overwrite an existing file.' >&2
  echo "$name.f already exists." >&2
  exit 1
fi

# Render to file
echo "$data" > "$root"/"$name".f
